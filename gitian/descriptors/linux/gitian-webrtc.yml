---
name: "webrtc-linux"
distro: "debian"
suites:
- "wheezy"
architectures:
- "i386"
- "amd64"
packages:
- "unzip"
- "zip"
- "hardening-wrapper"
- "libasound2-dev"
- "libexpat1-dev"
- "libglib2.0-dev"
- "libgtk2.0-dev"
- "libudev-dev"
- "libx11-dev"
- "libxext-dev"
- "libxrandr-dev"
- "pkg-config"
reference_datetime: "2000-01-01 00:00:00"
remotes:
- "url": "https://chromium.googlesource.com/chromium/tools/depot_tools.git"
  "dir": "depot_tools"
files:
- "dzip.sh"
- "binutils-linux32-utils.zip"
- "binutils-linux64-utils.zip"
- "gcc-linux32-utils.zip"
- "gcc-linux64-utils.zip"
- "webrtc.tar.gz"
- "webrtc-linux.patch"
script: |
  INSTDIR="$HOME/install"
  export REFERENCE_DATETIME
  export TZ=UTC
  export LC_ALL=C
  umask 0022
  #
  mkdir -p $OUTDIR/

  # Config options for hardening-wrapper
  export DEB_BUILD_HARDENING=1
  export DEB_BUILD_HARDENING_STACKPROTECTOR=1
  export DEB_BUILD_HARDENING_FORTIFY=1
  export DEB_BUILD_HARDENING_FORMAT=1
  export DEB_BUILD_HARDENING_PIE=1

  # Preparing Binutils and GCC for webrtc
  unzip -d $INSTDIR binutils-linux$GBUILD_BITS-utils.zip
  # Make sure gold is used with the hardening wrapper for full RELRO, see
  # #13031.
  cd $INSTDIR/binutils/bin
  rm ld
  cp /usr/bin/hardened-ld ./
  mv ld.gold ld.gold.real
  ln -sf hardened-ld ld.gold
  ln -sf ld.gold ld
  cd ~/build
  unzip -d $INSTDIR gcc-linux$GBUILD_BITS-utils.zip
  # Make sure we use the hardening wrapper when compiling Tor Browser.
  cd $INSTDIR/gcc/bin
  cp /usr/bin/hardened-cc ./
  mv gcc gcc.real
  mv c++ c++.real
  ln -sf hardened-cc gcc
  ln -sf hardened-cc c++
  cd ~/build
  export PATH=$INSTDIR/gcc/bin:$INSTDIR/binutils/bin:$PATH
  # GN needs libatomic.so.1 here.
  export LD_LIBRARY_PATH=$INSTDIR/gcc/lib
  ARCH=""
  if [ $GBUILD_BITS == "64" ];
  then
    ARCH="64"
  fi
  # Make sure our GCC gets properly used.
  export LD_LIBRARY_PATH=$INSTDIR/gcc/lib$ARCH

  # Setting up depot_tools
  # https://dev.chromium.org/developers/how-tos/install-depot-tools
  export PATH="$PATH:$PWD/depot_tools"
  # Disable automatic updating.
  export DEPOT_TOOLS_UPDATE=0

  # Building webrtc
  tar xaf webrtc.tar.gz
  cd webrtc/src
  patch -p1 < ../../webrtc-linux.patch

  # First, build a copy of GN, rather than use the prebuilt copy in buildtools/linux64.
  cd tools/gn
  # __STDC_FORMAT_MACROS is needed for a definition of PRIxPTR from inttypes.h.
  CXXFLAGS=-D__STDC_FORMAT_MACROS=1 LDFLAGS=-latomic ./bootstrap/bootstrap.py --no-rebuild --no-clean
  cd ../..
  # This is where bootstrap.py stashes the built gn.
  GN="$PWD/out_bootstrap/gn"

  export GN_ARGS=""
  # For a list of all possible GN args, do "gn gen out/Release; gn args --list out/Release".
  # https://chromium.googlesource.com/chromium/src/+/master/tools/gn/docs/cross_compiles.md
  GN_ARGS+=" target_os=\"linux\" target_cpu=\"$(if [ $GBUILD_BITS = 32 ]; then echo x86; else echo x64; fi)\""
  # Not debug.
  GN_ARGS+=" is_debug=false"
  # There are warnings from unused returns.
  GN_ARGS+=" treat_warnings_as_errors=false"
  # Build static libraries.
  GN_ARGS+=" is_component_build=false"
  # Do not use bundled utilities.
  GN_ARGS+=" is_clang=false use_sysroot=false"
  GN_ARGS+=" gold_path=\"$INSTDIR/binutils/bin\""
  # Make extra sure we don't use bundled binutils.
  rm -rf third_party/binutils/Linux_*
  # Avoid some dependencies.
  GN_ARGS+=" use_ozone=true use_gconf=false"
  GN_ARGS+=" rtc_include_opus=false rtc_include_ilbc=false rtc_include_internal_audio_device=false rtc_include_pulse_audio=false"
  # Included for "field_trial" below.  Maybe "fieldtrial_testing_like_official_build" could help here?
  #GN_ARGS+=" rtc_include_tests=false"
  rm -rf out/Release
  "$GN" gen out/Release --args="$GN_ARGS"
  ninja -C out/Release webrtc field_trial metrics_default pc_test_utils
  # https://github.com/keroserene/go-webrtc/issues/23#issuecomment-175312648
  ar crs libwebrtc-magic.a $(find . -name '*.o' -not -name '*.main.o' | sort)
  cd ../..

  # Grabbing the result
  cd $INSTDIR
  mkdir -p webrtc/include webrtc/lib
  cp -f $HOME/build/webrtc/src/libwebrtc-magic.a webrtc/lib/libwebrtc-linux-$(if [ $GBUILD_BITS = 32 ]; then echo 386; else echo amd64; fi)-magic.a
  INCLUDE_DIR="$PWD/webrtc/include"
  (cd $HOME/build/webrtc/src && for h in $(find talk/ webrtc/ -type f -name '*.h'); do
    mkdir -p "$INCLUDE_DIR/$(dirname $h)"
    cp -f "$h" "$INCLUDE_DIR/$h"
  done)

  ~/build/dzip.sh webrtc-linux$GBUILD_BITS-gbuilt.zip webrtc
  cp webrtc-linux$GBUILD_BITS-gbuilt.zip $OUTDIR/
